# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore Backend Dependencies
      run: dotnet restore backend/backend.sln

    - name: Build Backend
      run: dotnet build backend/backend.sln --no-restore

    - name: Fix Backend Formatting
      run: dotnet format backend/ --include-generated

    - name: Verify Backend Formatting
      run: dotnet format backend/ --verify-no-changes --include-generated

    - name: Test Backend
      run: dotnet test backend/backend.sln /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=backend/artifacts/coverage/ --no-build --verbosity normal

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate Coverage Report
      run: reportgenerator "-reports:backend/artifacts/coverage/coverage.cobertura.xml" "-targetdir:backend/coverage-report" -reporttypes:Html

    - name: Upload Backend Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: backend/coverage-report

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Frontend Dependencies
      run: npm install --prefix frontend

    - name: Lint Frontend
      run: npm run lint --prefix frontend

    - name: Test Frontend
      run: npm run test:coverage --prefix frontend

    - name: Upload frontend coverage report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/tests/coverage/frontend/

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: infra/Dockerfile.backend
        push: false
        tags: your-dockerhub-username/family-tree-backend:latest
        outputs: type=docker,dest=/tmp/backend-image.tar

    - name: Build frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: infra/Dockerfile.frontend
        push: false
        tags: your-dockerhub-username/family-tree-frontend:latest
        outputs: type=docker,dest=/tmp/frontend-image.tar

    - name: Upload backend Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-image
        path: /tmp/backend-image.tar

    - name: Upload frontend Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-image
        path: /tmp/frontend-image.tar

  docker-push:
    needs: docker-build
    runs-on: ubuntu-latest
    if: false # Temporarily skip pushing

    steps:
    - name: Download backend Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-image
        path: /tmp

    - name: Download frontend Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-image
        path: /tmp

    - name: Load backend Docker image
      run: docker load --input /tmp/backend-image.tar

    - name: Load frontend Docker image
      run: docker load --input /tmp/frontend-image.tar

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Push backend Docker image
      run: docker push your-dockerhub-username/family-tree-backend:latest

    - name: Push frontend Docker image
      run: docker push your-dockerhub-username/family-tree-frontend:latest
